import time
import os
from ultralytics import YOLO
import supervision as sv
import cv2

# 이미지가 새로 추가될 때 자동으로 처리하는 클래스를 정의합니다.
class NewImageHandler:
    def __init__(self, model, output_file):
        self.model = model # YOLOv8 모델을 저장합니다.
        self.output_file = output_file # 인식 결과를 저장할 파일 이름을 저장합니다.

    # 이미지를 처리하고 결과를 출력하고 저장하는 함수입니다.
    def process_image(self, image_path):
        # 이미지를 로드합니다.
        img = cv2.imread(image_path)
        
        # YOLOv8 모델을 사용해 이미지를 분석합니다.
        results = self.model(image_path)
        detections = sv.Detections.from_ultralytics(results[0])

        # 바운딩 박스와 라벨(이름)을 그리기 위한 도구를 준비합니다.
        bounding_box_annotator = sv.BoxAnnotator()
        label_annotator = sv.LabelAnnotator()

        # 인식된 객체의 이름과 신뢰도를 리스트로 만듭니다.
        labels = [
            f"{self.model.names[class_id]}"
            for _, _, confidence, class_id, *_ in detections
        ]

        # 인식된 결과를 화면에 출력하고, 텍스트 파일에 저장합니다.
        with open(self.output_file, "w") as file: # 파일을 추가 모드로 엽니다.
            for label in labels:
                print(label) # 결과를 화면에 출력합니다.
                file.write(f"{label}\n") # 결과를 파일에 기록합니다.

        # 이미지에 바운딩 박스와 라벨을 추가합니다.
        annotated_image = bounding_box_annotator.annotate(scene=img, detections=detections)
        annotated_image = label_annotator.annotate(scene=annotated_image, detections=detections, labels=labels)

        # 주석이 추가된 이미지를 화면에 표시합니다.
        sv.plot_image(annotated_image)
        return annotated_image  # annotated_image 반환


# 웹캠을 30초마다 캡처하여 처리하는 함수
def capture_from_webcam(model, output_file):
    cap = cv2.VideoCapture(0)  # 웹캠 열기
    interval = 10  # 30초 간격 (초 단위)

    # 'KIM' 폴더가 존재하는지 확인하고, 없으면 생성합니다.
    if not os.path.exists("KIM"):
        os.makedirs("KIM")

    while True:

        ret, frame = cap.read()

        if not ret:
            print("웹캠에서 프레임을 읽어오지 못했습니다. 웹캠 연결 상태를 확인하세요.")
            break  # 웹캠 접근 실패 시 루프 종료

        print("캡쳐 시도 중...")
        # 현재 시간을 기준으로 파일 이름 생성
        image_path = f"KIM/captured_{int(time.time())}.jpg"

        try:
            cv2.imwrite(image_path, frame)  # 프레임 저장 시도
            print(f"이미지 저장 성공: {image_path}")

            # 이미지 처리 및 분석, annotated_image 받기
            handler = NewImageHandler(model, output_file)
            annotated_image = handler.process_image(image_path)

            try:
                sv.plot_image(annotated_image)
            except Exception as e:
                print(f"이미지 표시 중 오류 발생: {e}")

        except Exception as e:
            print(f"이미지 저장 또는 처리 중 오류 발생: {e}")

        time.sleep(interval)  # 30초 대기

    cap.release()  # 웹캠 자원 해제

# 프로그램의 시작 지점입니다.
if __name__ == "__main__":
    # YOLOv8 모델을 로드합니다. 받은 pt 파일의 이름을 입력합니다.
    model = YOLO('C:\\Users\\samsung\\Desktop\\vege.pt') # vege.pt는 학습시킨 YOLOv8모델입니다. 모델은 반드시 바탕화면에 위치해있어야 합니다.

    # 결과를 저장할 파일 이름을 설정합니다.
    output_file = "ingredients.txt" # 여기서 파일 이름을 지정합니다.

    # 웹캠 스트리밍을 통해 5분마다 이미지를 캡처하고 처리합니다.
    capture_from_webcam(model, output_file)
